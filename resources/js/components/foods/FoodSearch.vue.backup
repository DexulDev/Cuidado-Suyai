<template>
  <div class="food-search surface-blur p-4">
    <div class="row g-3">
      <div class="col-md-8">
        <div class="search-input-wrapper">
          <i class="bi bi-search search-icon"></i>
          <input type="text" 
            class="form-control search-input"
            v-model="searchQuery" 
            placeholder="Buscar por nombre de alimento/receta..."
            @input="debounceSearch"
          >
          <span v-if="searchQuery" @click="clearSearch" class="clear-search">
            <i class="bi bi-x-circle"></i>
          </span>
        </div>
      </div>
      <div class="col-md-4">
        <div class="form-group mb-0">
          <label for="category" class="form-label small fw-medium mb-1">Categoría</label>
          <div class="select-wrapper">
            <select class="form-select custom-select" id="category" v-model="selectedCategory" @change="searchFoods">
              <option value="desayuno">Desayuno</option>
              <option value="almuerzo">Almuerzo</option>
              <option value="cena">Cena</option>
              <option value="snack">Snack</option>
              <option value="postre">Postre</option>
            </select>
            <i class="bi bi-chevron-down select-icon"></i>
          </div>
        </div>
      </div>
    </div>

    <!-- Results Container -->
    <div class="results-container surface-blur mt-4">
      <!-- Loading State -->
      <div v-if="loading" class="text-center py-5 loading-container">
        <div class="pulse-loader mb-3"></div>
        <p class="loading-text">Buscando recetas para ti...</p>
      </div>
      
      <!-- Initial State (No Search Yet) -->
      <div v-else-if="!hasSearched && !foods.length" class="initial-state text-center py-5">
        <div class="initial-icon-container mb-4">
          <i class="bi bi-journal-richtext initial-icon"></i>
        </div>
        <h4 class="mb-3">Descubre recetas saludables</h4>
        <p class="text-muted mb-4">Explora nuestra colección de recetas para tu bienestar diario</p>
        <div class="suggested-categories d-flex flex-wrap justify-content-center gap-3 mb-4">
          <div class="category-card" @click="setCategoryFilter('desayuno')">
            <i class="bi bi-cup-hot"></i>
            <span>Desayuno</span>
          </div>
          <div class="category-card" @click="setCategoryFilter('almuerzo')">
            <i class="bi bi-egg-fried"></i>
            <span>Almuerzo</span>
          </div>
          <div class="category-card" @click="setCategoryFilter('postre')">
            <i class="bi bi-cake2"></i>
            <span>Postre</span>
          </div>
          <div class="category-card" @click="setCategoryFilter('cena')">
            <i class="bi bi-cup-straw"></i>
            <span>Cena</span>
          </div>
        </div>
      </div>
      
      <!-- Empty Results State -->
      <div v-else-if="hasSearched && foods.length === 0" class="empty-state text-center py-5">
        <div class="empty-state-icon mb-3">
          <i class="bi bi-search"></i>
          <i class="bi bi-x"></i>
        </div>
        <h4 class="mb-2">No se encontraron recetas</h4>
        <p class="text-muted mb-4">Intenta con otra búsqueda o explora nuestras sugerencias</p>
        <div class="suggested-terms d-flex flex-wrap justify-content-center gap-2 mb-3">
          <span class="suggested-term" @click="setCategoryFilter('desayuno')">Desayuno</span>
          <span class="suggested-term" @click="setCategoryFilter('almuerzo')">Almuerzo</span>
          <span class="suggested-term" @click="setCategoryFilter('cena')">Cena</span>
          <span class="suggested-term" @click="setCategoryFilter('postre')">Postre</span>
        </div>
      </div>
      
      <!-- Results Grid -->
      <div v-else class="recipe-grid p-4">
        <div v-for="food in foods" :key="food.id" class="recipe-card-wrapper">
          <div class="recipe-card surface-blur" @click="openFood(food.id)">
            <div class="recipe-header">
              <div v-if="food.image_path || food.image_url" class="recipe-image-container">
                <img v-lazy :data-src="food.image_path || food.image_url" 
                     :alt="food.name"
                     class="recipe-image">
                <div class="recipe-image-overlay"></div>
              </div>
              <div v-else class="recipe-image-placeholder">
                <i class="bi bi-journal-richtext"></i>
              </div>
              
              <div class="recipe-badges">
                <span class="badge-pill badge-accent" v-if="food.category">{{ food.category }}</span>
                <span class="badge-pill" :class="getDifficultyBadgeClass(food.difficulty)" v-if="food.difficulty">
                  {{ food.difficulty }}
                </span>
              </div>
            </div>
            
            <div class="recipe-body">
              <h5 class="recipe-title">{{ food.name }}</h5>
              <p class="recipe-description">{{ truncateText(food.description, 100) }}</p>
              
              <div class="nutrition-info">
                <div class="nutrition-item" v-if="food.calories_per_serving">
                  <i class="bi bi-fire"></i>
                  <span class="nutrition-value">{{ food.calories_per_serving }}</span>
                  <span class="nutrition-label">kcal</span>
                </div>
                <div class="nutrition-item" v-if="food.protein">
                  <i class="bi bi-egg-fried"></i>
                  <span class="nutrition-value">{{ food.protein }}g</span>
                  <span class="nutrition-label">Prot.</span>
                </div>
                <div class="nutrition-item" v-if="food.carbohydrates">
                  <i class="bi bi-circle-half"></i>
                  <span class="nutrition-value">{{ food.carbohydrates }}g</span>
                  <span class="nutrition-label">Carb.</span>
                </div>
                <div class="nutrition-item" v-if="food.fats">
                  <i class="bi bi-droplet-half"></i>
                  <span class="nutrition-value">{{ food.fats }}g</span>
                  <span class="nutrition-label">Grasas</span>
                </div>
              </div>
              
              <div class="recipe-footer" v-if="food.preparation_time">
                <div class="recipe-meta-item">
                  <i class="bi bi-clock"></i>
                  <span>{{ food.preparation_time }} min</span>
                </div>
                <button class="view-details-btn">
                  <i class="bi bi-eye"></i>
                  <span>Ver detalles</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

      <!-- Modal Detalle usando ModalPortal -->
      <ModalPortal :show="showFoodModal" @hide="closeFoodModal" size="xl">
        <template #header>
          <h5 class="modal-title">{{ activeFood?.name }}</h5>
        </template>
        
        <template #body>
          <div v-if="activeFood">
            <div v-if="activeFood.images && activeFood.images.length" id="foodImagesCarousel" class="carousel slide mb-4" data-bs-ride="carousel">
              <div class="carousel-inner">
                <div class="carousel-item" :class="{active: idx===0}" v-for="(img, idx) in activeFood.images" :key="img.id">
                  <img v-lazy :data-src="img.full_url" class="d-block w-100" :alt="activeFood.name" style="max-height:380px;object-fit:cover;border-radius:var(--cn-radius);">
                </div>
              </div>
              <button class="carousel-control-prev" type="button" data-bs-target="#foodImagesCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Anterior</span>
              </button>
              <button class="carousel-control-next" type="button" data-bs-target="#foodImagesCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Siguiente</span>
              </button>
            </div>
              
              <div class="row mb-4">
                <div class="col-md-12">
                  <div class="modal-badges d-flex flex-wrap gap-2 mb-3">
                    <span class="badge-pill badge-accent">{{ activeFood.category }}</span>
                    <span class="badge-pill" :class="getDifficultyBadgeClass(activeFood.difficulty)">
                      {{ activeFood.difficulty }}
                    </span>
                    <span class="badge-pill badge-primary" v-if="activeFood.preparation_time">
                      <i class="bi bi-clock me-1"></i>{{ activeFood.preparation_time }} min
                    </span>
                  </div>
                  
                  <div class="recipe-description mb-4 surface-blur p-3 rounded">
                    <p>{{ activeFood.description }}</p>
                  </div>
                  
                  <div class="nutrition-card surface-blur p-4 mb-4 rounded">
                    <h6 class="fw-bold mb-3">Información Nutricional</h6>
                    <div class="nutrition-grid">
                      <div class="nutrition-item-large" v-if="activeFood.calories_per_serving">
                        <div class="nutrition-icon">
                          <i class="bi bi-fire"></i>
                        </div>
                        <div class="nutrition-details">
                          <div class="nutrition-value-large">{{ activeFood.calories_per_serving }}</div>
                          <div class="nutrition-label-large">Calorías</div>
                        </div>
                      </div>
                      
                      <div class="nutrition-item-large" v-if="activeFood.protein">
                        <div class="nutrition-icon">
                          <i class="bi bi-egg-fried"></i>
                        </div>
                        <div class="nutrition-details">
                          <div class="nutrition-value-large">{{ activeFood.protein }}g</div>
                          <div class="nutrition-label-large">Proteína</div>
                        </div>
                      </div>
                      
                      <div class="nutrition-item-large" v-if="activeFood.carbohydrates">
                        <div class="nutrition-icon">
                          <i class="bi bi-reception-4"></i>
                        </div>
                        <div class="nutrition-details">
                          <div class="nutrition-value-large">{{ activeFood.carbohydrates }}g</div>
                          <div class="nutrition-label-large">Carbohidratos</div>
                        </div>
                      </div>
                      
                      <div class="nutrition-item-large" v-if="activeFood.fats">
                        <div class="nutrition-icon">
                          <i class="bi bi-droplet-half"></i>
                        </div>
                        <div class="nutrition-details">
                          <div class="nutrition-value-large">{{ activeFood.fats }}g</div>
                          <div class="nutrition-label-large">Grasas</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div v-if="activeFood.ingredients" class="ingredients-section surface-blur p-4 rounded mb-4">
                    <h6 class="recipe-section-title">
                      <i class="bi bi-basket2 me-2"></i>Ingredientes
                    </h6>
                    <div class="section-divider mb-3" style="width: 50px; margin-top: 0.5rem;"></div>
                    <ul class="ingredients-list">
                      <li v-for="(line, idx) in splitLines(activeFood.ingredients)" :key="idx" class="ingredient-item">
                        {{ line }}
                      </li>
                    </ul>
                  </div>
                  
                  <div v-if="activeFood.preparation" class="preparation-section surface-blur p-4 rounded">
                    <h6 class="recipe-section-title">
                      <i class="bi bi-journal-text me-2"></i>Preparación
                    </h6>
                    <div class="section-divider mb-3" style="width: 50px; margin-top: 0.5rem;"></div>
                    <ol class="preparation-list">
                      <li v-for="(line, idx) in splitLines(activeFood.preparation)" :key="idx" class="preparation-step">
                        {{ line }}
                      </li>
                    </ol>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </template>
      </ModalPortal>
    </div>  
</template>

<script>
export default {
  data() {
    return {
      searchQuery: '',
      selectedCategory: '',
      foods: [],
      loading: false,
      activeFood: null,
      showFoodModal: false,
      bsModal: null,
      searchTimer: null,
      hasSearched: false,
      isOpeningNewModal: false, // Flag para controlar el proceso de apertura de modal
      featuredCategories: [
        { name: 'Desayuno', icon: 'cup-hot' },
        { name: 'Almuerzo', icon: 'egg-fried' },
        { name: 'Postre', icon: 'cake2' },
        { name: 'Cena', icon: 'cup-straw' }
      ]
    };
  },
  computed: {
    modalHeaderStyle() {
      return { backgroundColor: 'var(--cn-primary)', color: 'var(--cn-white)' };
    }
  },
  methods: {
    debounceSearch() {
      // Clear the previous timer
      clearTimeout(this.searchTimer);
      
      // Set a new timer for 500ms
      this.searchTimer = setTimeout(() => {
        this.searchFoods();
      }, 500);
    },
    
    async searchFoods() {
      this.loading = true;
      this.hasSearched = true;
      
      // Add animation class to show transition
      document.querySelector('.results-container')?.classList.add('searching');
      
      try {
        const response = await axios.get('/api/foods/search', { 
          params: { 
            query: this.searchQuery, 
            category: this.selectedCategory 
          } 
        });
        
        // Slight delay for better UX
        setTimeout(() => {
          this.foods = response.data;
          
          // Log the search for telemetry only if user searched by text (not category or empty)
          if (this.searchQuery && this.searchQuery.trim().length > 0) {
            this.logSearch();
          }
          
          // Remove animation class
          document.querySelector('.results-container')?.classList.remove('searching');
          this.loading = false;
        }, 300);
      } catch (e) { 
        console.error(e); 
        this.loading = false; 
        document.querySelector('.results-container')?.classList.remove('searching');
      }
    },
    
    logSearch() {
      // No registrar búsquedas vacías o solo espacios en blanco
      if (!this.searchQuery || this.searchQuery.trim().length === 0) {
        return;
      }
      
      // Send telemetry data to backend
      axios.post('/api/log-search', {
        search_type: 'food',
        query: this.searchQuery.trim(),
        category: this.selectedCategory,
        results_count: this.foods.length
      }).catch(error => {
        console.error('Error logging search:', error);
      });
    },
    
    truncateText(text, length) {
      if (!text) return '';
      return text.length > length ? text.substring(0, length) + '...' : text;
    },
    
    getDifficultyBadgeClass(difficulty) {
      switch (difficulty?.toLowerCase()) {
        case 'fácil': return 'badge-success';
        case 'moderado': return 'badge-warning';
        case 'difícil': return 'badge-danger';
        default: return 'badge-secondary';
      }
    },
    
    setSearchTerm(term) {
      this.searchQuery = term;
      this.searchFoods();
      
      // Animate scroll to results
      setTimeout(() => {
        document.querySelector('.results-container')?.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      }, 300);
    },
    
    setCategoryFilter(category) {
      this.selectedCategory = category;
      this.searchQuery = ''; // Opcional: limpiar búsqueda por texto
      this.searchFoods();
      
      // Animate scroll to results
      setTimeout(() => {
        document.querySelector('.results-container')?.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      }, 300);
    },
    
    clearSearch() {
      this.searchQuery = '';
      this.selectedCategory = '';
      this.hasSearched = false;
      this.foods = [];
      // Focus the input field after clearing
      this.$nextTick(() => {
        document.querySelector('.search-input')?.focus();
      });
    },
    
    async openFood(id) {
      try {
        const { data } = await axios.get(`/api/foods/${id}`);
        this.activeFood = data;
        this.showFoodModal = true;
        
        // Registrar búsqueda para telemetría (solo si hay texto de búsqueda)
        if (this.searchQuery && this.searchQuery.trim().length > 0) {
          this.logSearch();
        }
      } catch (e) { 
        console.error('Error cargando comida', e);
      }
    },

    closeFoodModal() {
      this.showFoodModal = false;
      this.activeFood = null;
    },
    
    handleModalHidden() {
      // Limpiar datos cuando la modal se cierra
      this.activeFood = null;
    },
    
    handleModalError() {
      // Limpieza en caso de error
      this.activeFood = null;
      this.cleanupModal();
      
      // Mostrar mensaje de error amigable al usuario
      alert('Lo sentimos, hubo un problema al cargar los detalles. Por favor, inténtelo nuevamente.');
    },
    
    cleanupModal() {
      try {
        // Cerrar la modal si existe
        if (this.bsModal) {
          try {
            this.bsModal.hide();
          } catch (e) {
            console.warn('Error al cerrar modal:', e);
          }
          this.bsModal = null;
        }
        
        // Eliminar cualquier modal del DOM que pueda estar causando problemas
        const modalEl = document.getElementById('foodDetailModal');
        if (modalEl) {
          // Eliminar eventos
          modalEl.removeEventListener('hidden.bs.modal', this.handleModalHidden);
        }
        
        // Eliminar todos los backdrops
        document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
          backdrop.remove();
        });
        
        // Limpiar clases y estilos del body
        document.body.classList.remove('modal-open');
        document.body.style.removeProperty('overflow');
        document.body.style.removeProperty('padding-right');
        
        // Limpiar datos solo si se está cerrando manualmente
        // No limpiar si estamos preparando para mostrar un nuevo modal
        if (!this.isOpeningNewModal) {
          this.activeFood = null;
        }
        
        this.isOpeningNewModal = false;
      } catch (err) {
        console.warn('Error durante la limpieza de la modal:', err);
      }
    },
    
    splitLines(text) {
      if (!text) return [];
      return text.split(/\r?\n|,|\*/).map(t => t.trim()).filter(t => t.length);
    }
  },
  mounted() {
    // Don't automatically search on initial load to show featured categories
    // Instead, we'll show the initial state with category suggestions
  },
  
  beforeUnmount() {
    // Limpieza de recursos cuando el componente se destruye
    this.cleanupModal();
  },
  
  destroyed() {
    // Compatibilidad con Vue 2 - también limpiamos al destruir
    this.cleanupModal();
  }
};
</script>

<style scoped>
/* Main Container Styling */
.food-search {
  border-radius: var(--cn-radius);
  margin-bottom: 2rem;
  box-shadow: var(--cn-shadow);
  position: relative;
  z-index: 10;
  transition: var(--cn-transition);
  border: 1px solid rgba(255,255,255,.6);
}

.food-search:hover {
  box-shadow: var(--cn-shadow-lg);
}

/* Search Input Styling */
.search-input-wrapper {
  position: relative;
  margin-bottom: 0;
}

.search-input {
  padding: 0.85rem 1rem 0.85rem 2.8rem;
  border-radius: var(--cn-radius) !important;
  border: 1px solid rgba(var(--cn-primary-rgb), 0.15);
  background: rgba(255,255,255,0.8);
  backdrop-filter: blur(10px);
  box-shadow: var(--cn-shadow-sm);
  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  font-size: 0.95rem;
}

.search-input:focus {
  border-color: var(--cn-primary);
  box-shadow: 0 0 0 4px rgba(var(--cn-primary-rgb), 0.15);
  background: rgba(255,255,255,0.95);
}

.search-icon {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--cn-primary);
  font-size: 1.1rem;
  z-index: 2;
}

.clear-search {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--cn-dark-soft);
  cursor: pointer;
  opacity: 0.7;
  transition: var(--cn-transition);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 22px;
  height: 22px;
  border-radius: 50%;
}

.clear-search:hover {
  opacity: 1;
  background-color: rgba(var(--cn-primary-rgb), 0.1);
}

/* Custom Select Styling */
.select-wrapper {
  position: relative;
}

.custom-select {
  appearance: none;
  padding-right: 2.5rem;
  border-radius: var(--cn-radius) !important;
  border: 1px solid rgba(var(--cn-primary-rgb), 0.15);
  background: rgba(255,255,255,0.8);
  backdrop-filter: blur(10px);
  box-shadow: var(--cn-shadow-sm);
  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  font-size: 0.95rem;
  padding: 0.75rem 1rem;
  color: var(--cn-dark);
}

.custom-select:focus {
  border-color: var(--cn-primary);
  box-shadow: 0 0 0 4px rgba(var(--cn-primary-rgb), 0.15);
  background: rgba(255,255,255,0.95);
}

.select-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--cn-primary);
  pointer-events: none;
  transition: var(--cn-transition);
}

.custom-select:focus + .select-icon {
  transform: translateY(-50%) rotate(180deg);
}

/* Results Container */
.results-container {
  border-radius: var(--cn-radius);
  overflow: hidden;
  background: rgba(255, 255, 255, 0.7);
  backdrop-filter: blur(16px) saturate(180%);
  box-shadow: var(--cn-shadow);
  transition: all 0.4s cubic-bezier(0.19, 1, 0.22, 1);
  border: 1px solid rgba(255,255,255,.6);
  min-height: 300px;
  position: relative;
}

.results-container.searching {
  transform: translateY(5px);
  opacity: 0.8;
}

/* Loading State */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 300px;
}

.pulse-loader {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: radial-gradient(circle, var(--cn-primary) 10%, transparent 11%);
  background-size: 100% 100%;
  animation: pulse 1.5s ease-in-out infinite;
}

.loading-text {
  font-size: 1.1rem;
  margin-top: 1rem;
  color: var(--cn-primary);
  font-weight: 500;
  animation: fadeInOut 2s ease-in-out infinite;
}

/* Initial State */
.initial-state {
  padding: 3rem 1rem;
  animation: fadeIn 0.7s ease-in-out;
}

.initial-icon-container {
  background: var(--cn-gradient-primary);
  width: 80px;
  height: 80px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
  box-shadow: 0 10px 25px -5px rgba(var(--cn-primary-rgb), 0.5);
  animation: pulse 3s infinite;
}

.initial-icon {
  color: white;
  font-size: 2.5rem;
}

.suggested-categories {
  max-width: 600px;
  margin: 0 auto;
}

.category-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: rgba(255,255,255,0.7);
  border-radius: var(--cn-radius);
  padding: 1.25rem;
  width: 120px;
  transition: var(--cn-transition);
  cursor: pointer;
  box-shadow: var(--cn-shadow-sm);
  border: 1px solid rgba(255,255,255,0.8);
}

.category-card i {
  font-size: 2rem;
  margin-bottom: 0.75rem;
  color: var(--cn-primary);
  transition: var(--cn-transition);
}

.category-card span {
  font-weight: 500;
  color: var(--cn-dark);
  transition: var(--cn-transition);
}

.category-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--cn-shadow);
  background: var(--cn-gradient-primary);
}

.category-card:hover i,
.category-card:hover span {
  color: white;
}

/* Empty State */
.empty-state {
  padding: 3rem 1rem;
  animation: fadeIn 0.5s ease-in-out;
}

.empty-state-icon {
  position: relative;
  width: 80px;
  height: 80px;
  margin: 0 auto;
  margin-bottom: 1.5rem;
}

.empty-state-icon i:first-child {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 3.5rem;
  color: rgba(var(--cn-primary-rgb), 0.2);
}

.empty-state-icon i:last-child {
  position: absolute;
  bottom: 0;
  right: 0;
  font-size: 2rem;
  color: var(--cn-primary);
  background: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: var(--cn-shadow-sm);
}

.suggested-terms {
  margin: 0 auto;
  max-width: 500px;
}

.suggested-term {
  background: var(--cn-gradient-accent);
  color: var(--cn-dark);
  padding: 0.5rem 1rem;
  border-radius: var(--cn-radius-sm);
  font-weight: 500;
  font-size: 0.9rem;
  cursor: pointer;
  transition: var(--cn-transition);
  box-shadow: var(--cn-shadow-sm);
}

.suggested-term:hover {
  transform: translateY(-3px);
  box-shadow: var(--cn-shadow);
}

/* Recipe Cards Grid */
.recipe-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  padding: 1.5rem;
}

.recipe-card-wrapper {
  animation: fadeInUp 0.5s ease-out both;
}

.recipe-card {
  border-radius: var(--cn-radius);
  overflow: hidden;
  box-shadow: var(--cn-shadow);
  transition: var(--cn-transition);
  height: 100%;
  display: flex;
  flex-direction: column;
  border: 1px solid rgba(255,255,255,0.6);
  cursor: pointer;
}

.recipe-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--cn-shadow-lg);
}

.recipe-header {
  position: relative;
}

.recipe-image-container {
  height: 180px;
  overflow: hidden;
}

.recipe-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.6s ease;
}

.recipe-card:hover .recipe-image {
  transform: scale(1.1);
}

.recipe-image-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 60px;
  background: linear-gradient(to top, rgba(0,0,0,0.6), transparent);
}

.recipe-image-placeholder {
  height: 120px;
  background: linear-gradient(135deg, rgba(var(--cn-primary-rgb), 0.05), rgba(var(--cn-primary-rgb), 0.1));
  display: flex;
  align-items: center;
  justify-content: center;
}

.recipe-image-placeholder i {
  font-size: 2.5rem;
  color: rgba(var(--cn-primary-rgb), 0.3);
}

.recipe-badges {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  z-index: 2;
}

.badge-pill {
  display: inline-flex;
  padding: 0.35rem 0.85rem;
  font-size: 0.75rem;
  font-weight: 500;
  border-radius: 20px;
  background: rgba(255,255,255,0.9);
  color: var(--cn-dark);
  backdrop-filter: blur(10px);
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
  animation: scaleIn 0.3s ease-out;
}

.badge-accent {
  background: var(--cn-accent);
  color: var(--cn-dark);
}

.badge-success {
  background: var(--cn-success);
  color: white;
}

.badge-warning {
  background: var(--cn-accent);
  color: var(--cn-dark);
}

.badge-danger {
  background: var(--cn-secondary);
  color: white;
}

.badge-secondary {
  background: var(--cn-dark-soft);
  color: white;
}

.recipe-body {
  padding: 1.25rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.recipe-title {
  font-size: 1.2rem;
  font-weight: 600;
  color: var(--cn-primary);
  margin-bottom: 0.75rem;
  transition: var(--cn-transition);
}

.recipe-card:hover .recipe-title {
  color: var(--cn-secondary);
}

.recipe-description {
  color: var(--cn-dark);
  font-size: 0.9rem;
  line-height: 1.6;
  margin-bottom: 1.25rem;
  flex-grow: 1;
}

.nutrition-info {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
  margin-top: auto;
  margin-bottom: 1rem;
}

.nutrition-item {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  background: rgba(var(--cn-primary-rgb), 0.08);
  border-radius: 20px;
  padding: 0.35rem 0.85rem;
  font-size: 0.85rem;
  color: var(--cn-dark);
  transition: var(--cn-transition);
}

.nutrition-item:hover {
  background: rgba(var(--cn-primary-rgb), 0.15);
  transform: translateY(-2px);
}

.nutrition-item i {
  color: var(--cn-primary);
  font-size: 0.95rem;
}

.nutrition-value {
  font-weight: 600;
  color: var(--cn-primary);
  margin-right: 2px;
}

.nutrition-label {
  font-size: 0.7rem;
  color: var(--cn-dark-soft);
}

.recipe-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: auto;
  padding-top: 0.75rem;
  border-top: 1px solid rgba(var(--cn-primary-rgb), 0.05);
}

.recipe-meta-item {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 0.85rem;
  color: var(--cn-dark-soft);
}

.recipe-meta-item i {
  color: var(--cn-primary);
}

.view-details-btn {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  background: rgba(var(--cn-primary-rgb), 0.1);
  color: var(--cn-primary);
  border: none;
  border-radius: var(--cn-radius-sm);
  padding: 0.35rem 0.75rem;
  font-size: 0.85rem;
  font-weight: 500;
  transition: var(--cn-transition);
  cursor: pointer;
}

.view-details-btn:hover {
  background: var(--cn-primary);
  color: white;
  transform: translateY(-2px);
}

/* Modal styling */
.modal-modern .modal-content {
  border: none;
  border-radius: var(--cn-radius-lg);
  overflow: hidden;
  box-shadow: var(--cn-shadow-lg);
  background: linear-gradient(145deg, white, var(--cn-surface-alt));
  position: relative; /* Para posicionar el botón de emergencia */
}

.modal-modern .modal-header {
  background: var(--cn-primary);
  color: white;
  padding: 1.25rem 1.5rem;
  border-bottom: none;
}

.modal-modern .modal-footer {
  border-top: 1px solid var(--cn-gray-200);
  padding: 1rem 1.5rem;
}

.modal-modern .btn-close {
  background-color: rgba(255,255,255,0.8);
  border-radius: 50%;
  opacity: 1;
}

/* Asegurar visibilidad de la modal */
.modal-backdrop {
  z-index: 1040 !important;
}

#foodDetailModal {
  z-index: 1050 !important;
}

/* Recipe details styling */
.recipe-section-title {
  font-weight: 600;
  color: var(--cn-primary);
  margin-bottom: 0;
}

.ingredients-list, .preparation-list {
  padding-left: 1.25rem;
  margin-bottom: 0;
}

.ingredients-list li, .preparation-list li {
  margin-bottom: 0.75rem;
  line-height: 1.5;
}

.preparation-step {
  padding-left: 0.5rem;
}

/* Enhanced nutrition card for modal */
.nutrition-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 15px;
}

.nutrition-item-large {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border-radius: var(--cn-radius-sm);
  background-color: rgba(255,255,255,0.5);
  transition: var(--cn-transition);
}

.nutrition-item-large:hover {
  transform: translateY(-3px);
  box-shadow: var(--cn-shadow-sm);
}

.nutrition-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--cn-primary);
  color: white;
  font-size: 1.25rem;
}

.nutrition-details {
  flex: 1;
}

.nutrition-value-large {
  font-weight: 700;
  font-size: 1.15rem;
  color: var(--cn-dark);
  line-height: 1.2;
}

.nutrition-label-large {
  font-size: 0.8rem;
  color: var(--cn-dark-soft);
}

.recipe-description {
  line-height: 1.6;
  color: var(--cn-dark);
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes scaleIn {
  from { transform: scale(0.8); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 rgba(var(--cn-primary-rgb), 0.7); }
  70% { box-shadow: 0 0 0 15px rgba(var(--cn-primary-rgb), 0); }
  100% { box-shadow: 0 0 0 0 rgba(var(--cn-primary-rgb), 0); }
}

@keyframes fadeInOut {
  0% { opacity: 0.5; }
  50% { opacity: 1; }
  100% { opacity: 0.5; }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .recipe-grid {
    grid-template-columns: 1fr;
  }
  
  .category-card {
    width: 100px;
    padding: 1rem;
  }
  
  .category-card i {
    font-size: 1.75rem;
  }
  
  .recipe-image-container {
    height: 160px;
  }
  
  .nutrition-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>